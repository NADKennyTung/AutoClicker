# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\MainWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
import sys
import threading
import pyautogui
import time
from pynput.keyboard import Listener, Key

class AutoClickerService(threading.Thread):
    def __init__(self, listToDo: list):
        super(AutoClickerService, self).__init__()
        self.running = False
        self.program_run = True
        self.listToDo = listToDo

    def start_clicking(self):
        print("Starting auto clicker.")
        self.running = True

    def stop_clicking(self):
        self.running = False

    def exit(self):
        self.stop_clicking()
        self.program_run = False
        print("Auto clicker program ended.")

    def run_click(self):
        for todo in self.listToDo:
            pos_x = int(todo[0][0])
            pos_y = int(todo[0][1])
            delay = todo[1]
            if self.running:
                time.sleep(delay)
                pyautogui.moveTo(pos_x, pos_y)
                pyautogui.click()
                
            

    def run(self):
        while self.program_run:
            while self.running:
                self.run_click()
                time.sleep(0.1)

class Ui_MainWindow(QObject):
    pos_signal = pyqtSignal(object)
    key_signal = pyqtSignal(object)
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icon.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.current_pos = None
        self.row_count = None
        self.togglePos = False
        self.listToDo = []
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setFixedSize(550,480)
        self.scrollArea.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)
        self.scrollArea.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.scrollArea.setWidgetResizable(True)
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.verticalLayoutWidget = QtWidgets.QWidget(self.scrollAreaWidgetContents)
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setAlignment(Qt.AlignmentFlag.AlignTop)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        btnSetupPos = QPushButton("Chọn tọa độ")
        btnSetupPos.setFixedSize(108,32)
        btnSetupPos.clicked.connect(lambda: self.setup_pos(self.horizontalLayout))
        txtSetupPos = QTextEdit()
        txtSetupPos.setFixedSize(108,32)
        txtSetupPos.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        txtSetupPos.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        txtSetupPos.setLineWrapMode(QTextEdit.NoWrap)
        doubleSpinBox = QDoubleSpinBox()
        doubleSpinBox.setMaximum(999.99)
        doubleSpinBox.setMinimum(0.00)
        doubleSpinBox.setFixedSize(84,32)
        doubleSpinBox.setProperty("value", 1.0)
        btnDelete = QPushButton("Xóa")
        btnDelete.setFixedSize(60,32)
        btnDelete.clicked.connect(lambda: self.delete_pos(self.horizontalLayout))
        lblSetup = QLabel("Click sau (s)")
        lblSetup.setFixedSize(96,32)
        self.horizontalLayout.addWidget(btnSetupPos)
        self.horizontalLayout.addWidget(txtSetupPos)
        self.horizontalLayout.addWidget(lblSetup)
        self.horizontalLayout.addWidget(doubleSpinBox)
        self.horizontalLayout.addWidget(btnDelete)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.scrollAreaWidgetContents.setLayout(self.verticalLayout)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.btn_add_new = QtWidgets.QPushButton("Thêm thiết lập tọa độ")
        self.btn_add_new.clicked.connect(self.add_row_setup)
        # Scroll Area Layer add
        self.label_set_pos = QLabel("")
        self.label_set_pos.setStyleSheet("color: red")
        self.label_set_pos.setAlignment(Qt.AlignmentFlag.AlignCenter)
        vLayout = QVBoxLayout()
        vLayout.addWidget(self.btn_add_new)
        vLayout.addWidget(self.label_set_pos)
        vLayout.addWidget(self.scrollArea)
        self.btn_start = QPushButton("Bấm F2 để bắt đầu AutoClick")
        self.btn_start.clicked.connect(self.click_start)
        vLayout.addWidget(self.btn_start)
        self.centralwidget.setLayout(vLayout)
        self.pos_signal.connect(self.updateTxtPos)
        self.key_signal.connect(self.alertMessage)
        self.thread = None
        self.listener = None
        self.thread = AutoClickerService(self.listToDo)
        self.listener = Listener(on_press=self.on_press)
        self.listener.start()
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def setup_pos(self, layout):
        self.label_set_pos.setText("Di chuột đến vị trí cần Click và bấm F1 để chọn tọa độ")
        self.togglePos = True
        self.row_count = self.verticalLayout.indexOf(layout)
    
    def updateTxtPos(self):
        self.verticalLayout.itemAt(self.row_count).layout().itemAt(1).widget().setText("{},{}".format(self.current_pos.x, self.current_pos.y));
        self.togglePos = False
        self.label_set_pos.setText("")
    
    def alertMessage(self):
        self.__showErrorMessage("Thiết lập tọa độ chưa đúng")

    def delete_items_of_layout(self, layout):
        if layout is not None:
            while layout.count():
                item = layout.takeAt(0)
                widget = item.widget()
                if widget is not None:
                    widget.setParent(None)
                else:
                    self.delete_items_of_layout(item.layout())

    def delete_pos(self, box):
        self.delete_items_of_layout(box.layout())
        self.verticalLayout.removeItem(box)
    
    def add_row_setup(self):
        qHboxLayout = QHBoxLayout()
        btnSetupPos = QPushButton("Chọn tọa độ")
        btnSetupPos.setFixedSize(108,32)
        btnSetupPos.clicked.connect(lambda: self.setup_pos(qHboxLayout))
        txtSetupPos = QTextEdit()
        txtSetupPos.setFixedSize(108,32)
        txtSetupPos.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        txtSetupPos.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        txtSetupPos.setLineWrapMode(QTextEdit.NoWrap)
        doubleSpinBox = QDoubleSpinBox()
        doubleSpinBox.setMaximum(999.99)
        doubleSpinBox.setMinimum(0.00)
        doubleSpinBox.setFixedSize(84,32)
        doubleSpinBox.setProperty("value", 1.0)
        btnDelete = QPushButton("Xóa")
        btnDelete.setFixedSize(60,32)
        btnDelete.clicked.connect(lambda: self.delete_pos(qHboxLayout))
        lblSetup = QLabel("Click sau (s)")
        lblSetup.setFixedSize(96,32)
        qHboxLayout.addWidget(btnSetupPos)
        qHboxLayout.addWidget(txtSetupPos)
        qHboxLayout.addWidget(lblSetup)
        qHboxLayout.addWidget(doubleSpinBox)
        qHboxLayout.addWidget(btnDelete)
        self.verticalLayout.addLayout(qHboxLayout)
    
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "AutoClicker - NAD"))
    
    def click_start(self):
        if not self.thread.running:
            threading.Thread(target=self.start).start()
        
    def __showErrorMessage(self, error_msg):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Critical)
        msg.setWindowTitle("Lỗi")
        msg.setText(error_msg)
        msg.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint)
        msg.exec()
        
    def on_press(self, key):
        if self.togglePos:
            get_position_key = Key.f1
            if key == get_position_key:
                self.current_pos = pyautogui.position()
                self.pos_signal.emit(key)
        start_stop_key = Key.f2
        if key == start_stop_key:
            max_w, max_h = pyautogui.size()
            self.listToDo = []
            flag = True
            for i in range(self.verticalLayout.count()):
                hLayout = self.verticalLayout.itemAt(i)
                position = hLayout.layout().itemAt(1).widget().toPlainText().split(',')
                delay = hLayout.layout().itemAt(3).widget().value()
                if len(position) != 2:
                    flag = False
                    break
                else:
                    if not position[0].strip().isnumeric():
                        flag = False
                        break
                    if not position[1].strip().isnumeric():
                        flag = False
                        break
                    if int(position[0]) <= 0 or int(position[0]) >= max_w:
                        flag = False
                        break
                    if int(position[1]) <= 0 or int(position[1]) >= max_h:
                        flag = False
                        break
                    self.listToDo.append([position, delay])
            if flag:
                threading.Thread(target=self.hotkeyThread_start).start()
            else:
                self.key_signal.emit(key)

    def hotkeyThread_start(self):
        if self.thread.running:
            self.stop()
            time.sleep(2)
            self.centralwidget.setEnabled(True)
            self.btn_start.setEnabled(True)
            self.btn_add_new.setEnabled(True)
            self.btn_start.setText("Bấm F2 để bắt đầu AutoClick")
            
        else:
            self.centralwidget.setEnabled(False)
            self.btn_start.setEnabled(False)
            self.btn_add_new.setEnabled(False)
            self.btn_start.setText("Bấm F2 để kết thúc AutoClick")
            self.start()

    def click_start(self):
        max_w, max_h = pyautogui.size()
        self.listToDo = []
        flag = True
        for i in range(self.verticalLayout.count()):
            hLayout = self.verticalLayout.itemAt(i)
            position = hLayout.layout().itemAt(1).widget().toPlainText().split(',')
            delay = hLayout.layout().itemAt(3).widget().value()
            if len(position) != 2:
                flag = False
                break
            else:
                if not position[0].strip().isnumeric():
                    flag = False
                    break
                if not position[1].strip().isnumeric():
                    flag = False
                    break
                if int(position[0]) <= 0 or int(position[0]) >= max_w:
                    flag = False
                    break
                if int(position[1]) <= 0 or int(position[1]) >= max_h:
                    flag = False
                    break
                self.listToDo.append([position, delay])
        if flag and not self.thread.running:
            threading.Thread(target=self.start).start()
        else:
            self.alertMessage()

    def start(self):
        self.thread = AutoClickerService(self.listToDo)
        self.thread.start()
        self.thread.start_clicking()
    
    def stop(self):
        self.thread.exit()

def main():
    app = QtWidgets.QApplication(sys.argv)
    window = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(window)
    window.show()
    sys.exit(app.exec_())


if __name__ == '__main__':
    main()
